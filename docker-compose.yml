services:
    app:
        build: # Specifies that the service should be built from a Dockerfile,
            # alt: use pre-built image
            # Defines build context, which is the directory from which the Dockerfile will be executed
            context: .
            # Specifies the Dockerfile to use for building the image
            dockerfile: .docker/app/Dockerfile
            args:
                - USER_ID=${UID:-1000}
            # Sets the working directory inside the container to /var/www/.
            # All commands will be run from this directory
        working_dir: /var/www/
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD}
        volumes:
            # Mounts the current directory (./) to /var/www inside the container
            # with the delegated option, which optimizes file system performance
            # by allowing the host to prioritize its updates(development)
            - ./:/var/www
            - app-storage:/var/www/storage
            - app-cache:/var/www/bootstrap/cache
        env_file:
            - .env
        # Ensure that the postgres & redis service start before the app
        depends_on:
            - postgres
            - redis
        networks:
            - l-s-s
        healthcheck:
            test: ["CMD", "php-fpm", "-t"]
            interval: 30s
            timeout: 10s
            retries: 3

    postgres:
        image: postgres:13
        container_name: db
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - ./.docker/postgres/volumes/pgdata:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        env_file:
            - .env
        networks:
            - l-s-s
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U user"]
            interval: 10s
            timeout: 5s
            retries: 5

    postgres_test:
        image: postgres:13
        container_name: db_test
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - ./.docker/postgres/volumes/pgdata_test:/var/lib/postgresql/data
        env_file:
            - .env.testing
        networks:
            - l-s-s

    nginx:
        image: nginx:1.21.6-alpine
        container_name: server
        restart: unless-stopped
        ports:
            - "80:80"
        volumes:
            - ./:/var/www
            - ./.docker/nginx.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - app
            - postgres
        networks:
            - l-s-s
    redis:
        image: redis:6.2-alpine
        container_name: cache
        restart: unless-stopped
        env_file:
            - .env
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD}
        ports:
            - "6379:6379"
        command: >
            redis-server --requirepass ${REDIS_PASSWORD}
        networks:
            - l-s-s

# Containers connected to a bridge network can communicate with each other
# while being isolated from the host network and other networks.
# This ensures that only containers that are part of the same network
# can access each other.
networks:
    l-s-s:
        driver: bridge

volumes:
    app-storage:
    app-cache: